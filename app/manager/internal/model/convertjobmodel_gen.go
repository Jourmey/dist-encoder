// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	convertJobFieldNames          = builder.RawFieldNames(&ConvertJob{})
	convertJobRows                = strings.Join(convertJobFieldNames, ",")
	convertJobRowsExpectAutoSet   = strings.Join(stringx.Remove(convertJobFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	convertJobRowsWithPlaceHolder = strings.Join(stringx.Remove(convertJobFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	convertJobModel interface {
		Insert(ctx context.Context, data *ConvertJob) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ConvertJob, error)
		Update(ctx context.Context, data *ConvertJob) error
		Delete(ctx context.Context, id int64) error
	}

	defaultConvertJobModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ConvertJob struct {
		Id        int64          `db:"id"`         // 主健
		ConvertId int64          `db:"convert_id"` // 配置id
		InPut     string         `db:"in_put"`     // 输入路径
		OutPut    string         `db:"out_put"`    // 输出路径
		Status    int64          `db:"status"`     // 任务状态 0等待 1进行中 2成功 3失败
		Host      sql.NullString `db:"host"`       // 工作机器的Host
		Ip        sql.NullString `db:"ip"`         // 工作机器的Ip
		CreatedAt time.Time      `db:"created_at"` // 创建时间
		UpdatedAt time.Time      `db:"updated_at"` // 更新时间
		DeletedAt sql.NullTime   `db:"deleted_at"`
	}
)

func newConvertJobModel(conn sqlx.SqlConn) *defaultConvertJobModel {
	return &defaultConvertJobModel{
		conn:  conn,
		table: "`convert_job`",
	}
}

func (m *defaultConvertJobModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultConvertJobModel) FindOne(ctx context.Context, id int64) (*ConvertJob, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", convertJobRows, m.table)
	var resp ConvertJob
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConvertJobModel) Insert(ctx context.Context, data *ConvertJob) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, convertJobRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ConvertId, data.InPut, data.OutPut, data.Status, data.Host, data.Ip, data.DeletedAt)
	return ret, err
}

func (m *defaultConvertJobModel) Update(ctx context.Context, data *ConvertJob) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, convertJobRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ConvertId, data.InPut, data.OutPut, data.Status, data.Host, data.Ip, data.DeletedAt, data.Id)
	return err
}

func (m *defaultConvertJobModel) tableName() string {
	return m.table
}
