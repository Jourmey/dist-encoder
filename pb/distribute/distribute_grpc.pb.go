// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: distribute.proto

package distribute

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributeClient is the client API for Distribute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributeClient interface {
	// 工作机器获取工作任务
	GetVideoJob(ctx context.Context, in *GetVideoJobRequest, opts ...grpc.CallOption) (*GetVideoJobResponse, error)
	// 工作机器上报工作状态
	SetVideoJobResult(ctx context.Context, in *SetVideoJobResultRequest, opts ...grpc.CallOption) (*SetVideoJobResultResponse, error)
	// QueryVideoJob 查询转码任务
	QueryVideoJob(ctx context.Context, in *QueryVideoJobRequest, opts ...grpc.CallOption) (*QueryVideoJobResponse, error)
	// AddVideoJob 添加视频转码任务
	AddVideoJob(ctx context.Context, in *AddVideoJobRequest, opts ...grpc.CallOption) (*AddVideoJobResponse, error)
	// ListConvertCnf 查询转码任务
	ListConvertCnf(ctx context.Context, in *ListConvertCnfRequest, opts ...grpc.CallOption) (*ListConvertCnfResponse, error)
	// AddConvertCnf 添加视频转码任务
	AddConvertCnf(ctx context.Context, in *AddConvertCnfRequest, opts ...grpc.CallOption) (*AddConvertCnfResponse, error)
}

type distributeClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributeClient(cc grpc.ClientConnInterface) DistributeClient {
	return &distributeClient{cc}
}

func (c *distributeClient) GetVideoJob(ctx context.Context, in *GetVideoJobRequest, opts ...grpc.CallOption) (*GetVideoJobResponse, error) {
	out := new(GetVideoJobResponse)
	err := c.cc.Invoke(ctx, "/distribute.Distribute/GetVideoJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributeClient) SetVideoJobResult(ctx context.Context, in *SetVideoJobResultRequest, opts ...grpc.CallOption) (*SetVideoJobResultResponse, error) {
	out := new(SetVideoJobResultResponse)
	err := c.cc.Invoke(ctx, "/distribute.Distribute/SetVideoJobResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributeClient) QueryVideoJob(ctx context.Context, in *QueryVideoJobRequest, opts ...grpc.CallOption) (*QueryVideoJobResponse, error) {
	out := new(QueryVideoJobResponse)
	err := c.cc.Invoke(ctx, "/distribute.Distribute/QueryVideoJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributeClient) AddVideoJob(ctx context.Context, in *AddVideoJobRequest, opts ...grpc.CallOption) (*AddVideoJobResponse, error) {
	out := new(AddVideoJobResponse)
	err := c.cc.Invoke(ctx, "/distribute.Distribute/AddVideoJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributeClient) ListConvertCnf(ctx context.Context, in *ListConvertCnfRequest, opts ...grpc.CallOption) (*ListConvertCnfResponse, error) {
	out := new(ListConvertCnfResponse)
	err := c.cc.Invoke(ctx, "/distribute.Distribute/ListConvertCnf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributeClient) AddConvertCnf(ctx context.Context, in *AddConvertCnfRequest, opts ...grpc.CallOption) (*AddConvertCnfResponse, error) {
	out := new(AddConvertCnfResponse)
	err := c.cc.Invoke(ctx, "/distribute.Distribute/AddConvertCnf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributeServer is the server API for Distribute service.
// All implementations must embed UnimplementedDistributeServer
// for forward compatibility
type DistributeServer interface {
	// 工作机器获取工作任务
	GetVideoJob(context.Context, *GetVideoJobRequest) (*GetVideoJobResponse, error)
	// 工作机器上报工作状态
	SetVideoJobResult(context.Context, *SetVideoJobResultRequest) (*SetVideoJobResultResponse, error)
	// QueryVideoJob 查询转码任务
	QueryVideoJob(context.Context, *QueryVideoJobRequest) (*QueryVideoJobResponse, error)
	// AddVideoJob 添加视频转码任务
	AddVideoJob(context.Context, *AddVideoJobRequest) (*AddVideoJobResponse, error)
	// ListConvertCnf 查询转码任务
	ListConvertCnf(context.Context, *ListConvertCnfRequest) (*ListConvertCnfResponse, error)
	// AddConvertCnf 添加视频转码任务
	AddConvertCnf(context.Context, *AddConvertCnfRequest) (*AddConvertCnfResponse, error)
	mustEmbedUnimplementedDistributeServer()
}

// UnimplementedDistributeServer must be embedded to have forward compatible implementations.
type UnimplementedDistributeServer struct {
}

func (UnimplementedDistributeServer) GetVideoJob(context.Context, *GetVideoJobRequest) (*GetVideoJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoJob not implemented")
}
func (UnimplementedDistributeServer) SetVideoJobResult(context.Context, *SetVideoJobResultRequest) (*SetVideoJobResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVideoJobResult not implemented")
}
func (UnimplementedDistributeServer) QueryVideoJob(context.Context, *QueryVideoJobRequest) (*QueryVideoJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVideoJob not implemented")
}
func (UnimplementedDistributeServer) AddVideoJob(context.Context, *AddVideoJobRequest) (*AddVideoJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideoJob not implemented")
}
func (UnimplementedDistributeServer) ListConvertCnf(context.Context, *ListConvertCnfRequest) (*ListConvertCnfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConvertCnf not implemented")
}
func (UnimplementedDistributeServer) AddConvertCnf(context.Context, *AddConvertCnfRequest) (*AddConvertCnfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConvertCnf not implemented")
}
func (UnimplementedDistributeServer) mustEmbedUnimplementedDistributeServer() {}

// UnsafeDistributeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributeServer will
// result in compilation errors.
type UnsafeDistributeServer interface {
	mustEmbedUnimplementedDistributeServer()
}

func RegisterDistributeServer(s grpc.ServiceRegistrar, srv DistributeServer) {
	s.RegisterService(&Distribute_ServiceDesc, srv)
}

func _Distribute_GetVideoJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributeServer).GetVideoJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distribute.Distribute/GetVideoJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributeServer).GetVideoJob(ctx, req.(*GetVideoJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribute_SetVideoJobResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVideoJobResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributeServer).SetVideoJobResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distribute.Distribute/SetVideoJobResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributeServer).SetVideoJobResult(ctx, req.(*SetVideoJobResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribute_QueryVideoJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVideoJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributeServer).QueryVideoJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distribute.Distribute/QueryVideoJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributeServer).QueryVideoJob(ctx, req.(*QueryVideoJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribute_AddVideoJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVideoJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributeServer).AddVideoJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distribute.Distribute/AddVideoJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributeServer).AddVideoJob(ctx, req.(*AddVideoJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribute_ListConvertCnf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConvertCnfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributeServer).ListConvertCnf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distribute.Distribute/ListConvertCnf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributeServer).ListConvertCnf(ctx, req.(*ListConvertCnfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribute_AddConvertCnf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConvertCnfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributeServer).AddConvertCnf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distribute.Distribute/AddConvertCnf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributeServer).AddConvertCnf(ctx, req.(*AddConvertCnfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Distribute_ServiceDesc is the grpc.ServiceDesc for Distribute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Distribute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distribute.Distribute",
	HandlerType: (*DistributeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoJob",
			Handler:    _Distribute_GetVideoJob_Handler,
		},
		{
			MethodName: "SetVideoJobResult",
			Handler:    _Distribute_SetVideoJobResult_Handler,
		},
		{
			MethodName: "QueryVideoJob",
			Handler:    _Distribute_QueryVideoJob_Handler,
		},
		{
			MethodName: "AddVideoJob",
			Handler:    _Distribute_AddVideoJob_Handler,
		},
		{
			MethodName: "ListConvertCnf",
			Handler:    _Distribute_ListConvertCnf_Handler,
		},
		{
			MethodName: "AddConvertCnf",
			Handler:    _Distribute_AddConvertCnf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distribute.proto",
}
